(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
var compareProperty, dot;

module.exports = function(collection, expressions) {
  return collection.sort(function(a, b) {
    var expression, i, len, predicate, reverse, value;
    for (i = 0, len = expressions.length; i < len; i++) {
      expression = expressions[i];
      if (typeof expression === 'object') {
        predicate = expression.predicate;
        reverse = expression.reverse;
      } else {
        predicate = expression;
      }
      value = compareProperty(predicate, reverse)(a, b);
      if (value !== 0) {
        return value;
      }
    }
  });
};

dot = {
  get: function(obj, field) {
    var i, key, keys, len, value;
    keys = field.split('.');
    value = obj;
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      value = value[key];
    }
    return value;
  },
  set: function(obj, field, setValue) {
    var allButLastKey, i, key, keys, lastKey, len, value;
    keys = field.split('.');
    allButLastKey = keys.slice(0, -1);
    lastKey = keys[keys.length - 1];
    value = obj;
    for (i = 0, len = allButLastKey.length; i < len; i++) {
      key = allButLastKey[i];
      value = value[key] != null ? value[key] : value[key] = {};
    }
    return value[lastKey] = setValue;
  }
};

compareProperty = function(predicate, reverse) {
  var getter;
  getter = typeof predicate === 'function' ? function(obj) {
    return predicate(obj);
  } : function(obj) {
    return dot.get(obj, predicate);
  };
  getter;
  if (!reverse) {
    return function(a, b) {
      if (getter(a) < getter(b)) {
        return -1;
      } else if (getter(a) > getter(b)) {
        return 1;
      } else {
        return 0;
      }
    };
  } else {
    return function(a, b) {
      if (getter(a) > getter(b)) {
        return -1;
      } else if (getter(a) < getter(b)) {
        return 1;
      } else {
        return 0;
      }
    };
  }
};

},{}],2:[function(require,module,exports){
var ng;

require('./multi_order_by');

require('./st_element_id');

require('./st_shift_click');

ng = angular;

angular.module('smart-table').directive('stMultiSort', [
  'stConfig', '$parse', '$rootScope', 'stUniqueId', 'stShiftSort', function(stConfig, $parse, $rootScope, stUniqueId, stShiftSort) {
    return {
      restrict: 'A',
      require: '^stTable',
      link: function(scope, element, attr, ctrl) {
        var classAscent, classDescent, elementId, getter, index, predicate, sort, sortDefault, stateClasses;
        predicate = attr.stMultiSort;
        getter = $parse(predicate);
        index = 0;
        classAscent = attr.stClassAscent || stConfig.sort.ascentClass;
        classDescent = attr.stClassDescent || stConfig.sort.descentClass;
        stateClasses = [classAscent, classDescent];
        sortDefault = void 0;
        elementId = stUniqueId.generate();

        /*
        Use our custom orderBy filter, which supports reversing rows independently
         */
        ctrl.setSortFunction('multiOrderBy');

        /*
        Sort the rows.
        @param {Boolean} holdingShiftKey
         */
        sort = function(holdingShiftKey) {
          var base, reverse, tableState;
          index++;
          tableState = ctrl.tableState();
          if ((base = tableState.sort).predicate == null) {
            base.predicate = [];
          }
          reverse = index % 2 === 0;
          predicate = ng.isFunction(getter(scope)) ? getter(scope) : attr.stMultiSort;
          (function() {
            var indexOfExistingSort;
            indexOfExistingSort = (function() {
              var i, ref, sortConfig;
              ref = ctrl.tableState().sort.predicate;
              for (i in ref) {
                sortConfig = ref[i];
                if (sortConfig.elementId === elementId) {
                  return i;
                }
              }
              return -1;
            })();
            if (indexOfExistingSort !== -1) {
              return tableState.sort.predicate.splice(indexOfExistingSort, 1);
            }
          })();
          (function() {
            index = index % 2 === 0 ? 2 : 1;
            element.removeClass(stateClasses[index % 2]).addClass(stateClasses[index - 1]);
            if (!holdingShiftKey) {
              return $rootScope.$broadcast('clearOtherSortClasses', elementId);
            }
          })();
          tableState.sort.predicate.splice(stShiftSort.getIndex(elementId), 0, {
            elementId: elementId,
            predicate: predicate,
            reverse: reverse === true
          });
          tableState.pagination.start = 0;
          return ctrl.pipe();
        };
        if (attr.stSortDefault) {
          sortDefault = scope.$eval(attr.stSortDefault) != null ? scope.$eval(attr.stSortDefault) : attr.stSortDefault;
        }
        if (sortDefault) {
          index = sortDefault === 'reverse' ? 1 : 0;
          sort();
        }
        element.bind('click', function(e) {
          if (!predicate) {
            return;
          }
          if (e.shiftKey || e.altKey) {
            stShiftSort.clickElement(elementId);
          } else {
            stShiftSort.clear();
          }
          return scope.$apply(function() {
            return sort(e.shiftKey);
          });
        });
        return scope.$on('clearOtherSortClasses', function(e, sortedElementId) {
          if (sortedElementId !== elementId) {
            index = 0;
            return element.removeClass(classAscent).removeClass(classDescent);
          }
        });
      }
    };
  }
]);


},{"./multi_order_by":3,"./st_element_id":4,"./st_shift_click":5}],3:[function(require,module,exports){

/*
Like angular orderBy filter, but allows reversing each parameter individually (even getters)
 */
angular.module('smart-table').filter('multiOrderBy', function() {
  return require('orderby');
});


},{"orderby":1}],4:[function(require,module,exports){

/*
Generate unique ids to identify each sortable element on the page
 */
angular.module('smart-table').factory('stUniqueId', function() {
  var id;
  id = 0;
  return {
    generate: function() {
      return id++;
    }
  };
});


},{}],5:[function(require,module,exports){

/*
Service to manage shift clicks on elements
 */
var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

angular.module('smart-table').factory('stShiftSort', function() {
  var clickedElements;
  clickedElements = [];
  return {
    getIndex: function(elementId) {
      return clickedElements.indexOf(elementId) + 1;
    },
    clickElement: function(elementId) {
      if (indexOf.call(clickedElements, elementId) < 0) {
        return clickedElements.push(elementId);
      }
    },
    clear: function() {
      return clickedElements.length = 0;
    }
  };
});


},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvb3JkZXJieS9saWIvaW5kZXguanMiLCIvaG9tZS9sZWlmai9kZXYvdG1wL3N0LW11bHRpLXNvcnQvc3JjL2luZGV4LmNvZmZlZSIsIi9ob21lL2xlaWZqL2Rldi90bXAvc3QtbXVsdGktc29ydC9zcmMvbXVsdGlfb3JkZXJfYnkuY29mZmVlIiwiL2hvbWUvbGVpZmovZGV2L3RtcC9zdC1tdWx0aS1zb3J0L3NyYy9zdF9lbGVtZW50X2lkLmNvZmZlZSIsIi9ob21lL2xlaWZqL2Rldi90bXAvc3QtbXVsdGktc29ydC9zcmMvc3Rfc2hpZnRfY2xpY2suY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdFQSxJQUFBOztBQUFBLE9BQUEsQ0FBUSxrQkFBUjs7QUFDQSxPQUFBLENBQVEsaUJBQVI7O0FBQ0EsT0FBQSxDQUFRLGtCQUFSOztBQUVBLEVBQUEsR0FBSzs7QUFFTCxPQUFPLENBQUMsTUFBUixDQUFlLGFBQWYsQ0FBNkIsQ0FBQyxTQUE5QixDQUF3QyxhQUF4QyxFQUF1RDtFQUNyRCxVQURxRCxFQUVyRCxRQUZxRCxFQUdyRCxZQUhxRCxFQUlyRCxZQUpxRCxFQUtyRCxhQUxxRCxFQU1yRCxTQUFDLFFBQUQsRUFBVyxNQUFYLEVBQW1CLFVBQW5CLEVBQStCLFVBQS9CLEVBQTJDLFdBQTNDO1dBQ0U7TUFBQSxRQUFBLEVBQVUsR0FBVjtNQUNBLE9BQUEsRUFBUyxVQURUO01BRUEsSUFBQSxFQUFNLFNBQUMsS0FBRCxFQUFRLE9BQVIsRUFBaUIsSUFBakIsRUFBdUIsSUFBdkI7QUFDSixZQUFBO1FBQUEsU0FBQSxHQUFZLElBQUksQ0FBQztRQUNqQixNQUFBLEdBQVMsTUFBQSxDQUFPLFNBQVA7UUFDVCxLQUFBLEdBQVE7UUFDUixXQUFBLEdBQWMsSUFBSSxDQUFDLGFBQUwsSUFBc0IsUUFBUSxDQUFDLElBQUksQ0FBQztRQUNsRCxZQUFBLEdBQWUsSUFBSSxDQUFDLGNBQUwsSUFBdUIsUUFBUSxDQUFDLElBQUksQ0FBQztRQUNwRCxZQUFBLEdBQWUsQ0FDYixXQURhLEVBRWIsWUFGYTtRQUlmLFdBQUEsR0FBYztRQUNkLFNBQUEsR0FBWSxVQUFVLENBQUMsUUFBWCxDQUFBOztBQUVaOzs7UUFHQSxJQUFJLENBQUMsZUFBTCxDQUFxQixjQUFyQjs7QUFFQTs7OztRQUlBLElBQUEsR0FBTyxTQUFDLGVBQUQ7QUFDTCxjQUFBO1VBQUEsS0FBQTtVQUNBLFVBQUEsR0FBYSxJQUFJLENBQUMsVUFBTCxDQUFBOztnQkFDRSxDQUFDLFlBQWE7O1VBQzdCLE9BQUEsR0FBVSxLQUFBLEdBQVEsQ0FBUixLQUFhO1VBQ3ZCLFNBQUEsR0FBZSxFQUFFLENBQUMsVUFBSCxDQUFjLE1BQUEsQ0FBTyxLQUFQLENBQWQsQ0FBSCxHQUFxQyxNQUFBLENBQU8sS0FBUCxDQUFyQyxHQUF3RCxJQUFJLENBQUM7VUFFdEUsQ0FBQSxTQUFBO0FBQ0QsZ0JBQUE7WUFBQSxtQkFBQSxHQUF5QixDQUFBLFNBQUE7QUFDdkIsa0JBQUE7QUFBQTtBQUFBLG1CQUFBLFFBQUE7O2dCQUNFLElBQUcsVUFBVSxDQUFDLFNBQVgsS0FBd0IsU0FBM0I7QUFDRSx5QkFBTyxFQURUOztBQURGO0FBR0EscUJBQU8sQ0FBQztZQUplLENBQUEsQ0FBSCxDQUFBO1lBS3RCLElBQUcsbUJBQUEsS0FBeUIsQ0FBQyxDQUE3QjtxQkFDRSxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUExQixDQUFpQyxtQkFBakMsRUFBc0QsQ0FBdEQsRUFERjs7VUFOQyxDQUFBLENBQUgsQ0FBQTtVQVNHLENBQUEsU0FBQTtZQUNELEtBQUEsR0FBVyxLQUFBLEdBQVEsQ0FBUixLQUFhLENBQWhCLEdBQXVCLENBQXZCLEdBQThCO1lBQ3RDLE9BQU8sQ0FBQyxXQUFSLENBQW9CLFlBQWEsQ0FBQSxLQUFBLEdBQVEsQ0FBUixDQUFqQyxDQUE0QyxDQUFDLFFBQTdDLENBQXNELFlBQWEsQ0FBQSxLQUFBLEdBQVEsQ0FBUixDQUFuRTtZQUNBLElBQUcsQ0FBQyxlQUFKO3FCQUNFLFVBQVUsQ0FBQyxVQUFYLENBQXNCLHVCQUF0QixFQUErQyxTQUEvQyxFQURGOztVQUhDLENBQUEsQ0FBSCxDQUFBO1VBTUEsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBMUIsQ0FBaUMsV0FBVyxDQUFDLFFBQVosQ0FBcUIsU0FBckIsQ0FBakMsRUFBa0UsQ0FBbEUsRUFDRTtZQUFBLFNBQUEsRUFBVyxTQUFYO1lBQ0EsU0FBQSxFQUFXLFNBRFg7WUFFQSxPQUFBLEVBQVMsT0FBQSxLQUFXLElBRnBCO1dBREY7VUFLQSxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQXRCLEdBQThCO2lCQUM5QixJQUFJLENBQUMsSUFBTCxDQUFBO1FBNUJLO1FBOEJQLElBQUcsSUFBSSxDQUFDLGFBQVI7VUFDRSxXQUFBLEdBQWlCLHVDQUFILEdBQXlDLEtBQUssQ0FBQyxLQUFOLENBQVksSUFBSSxDQUFDLGFBQWpCLENBQXpDLEdBQThFLElBQUksQ0FBQyxjQURuRzs7UUFHQSxJQUFHLFdBQUg7VUFDRSxLQUFBLEdBQVcsV0FBQSxLQUFlLFNBQWxCLEdBQWlDLENBQWpDLEdBQXdDO1VBQ2hELElBQUEsQ0FBQSxFQUZGOztRQUlBLE9BQU8sQ0FBQyxJQUFSLENBQWEsT0FBYixFQUFzQixTQUFDLENBQUQ7VUFDcEIsSUFBQSxDQUFjLFNBQWQ7QUFBQSxtQkFBQTs7VUFDQSxJQUFHLENBQUMsQ0FBQyxRQUFGLElBQWMsQ0FBQyxDQUFDLE1BQW5CO1lBQ0UsV0FBVyxDQUFDLFlBQVosQ0FBeUIsU0FBekIsRUFERjtXQUFBLE1BQUE7WUFHRSxXQUFXLENBQUMsS0FBWixDQUFBLEVBSEY7O2lCQUlBLEtBQUssQ0FBQyxNQUFOLENBQWEsU0FBQTttQkFBRyxJQUFBLENBQUssQ0FBQyxDQUFDLFFBQVA7VUFBSCxDQUFiO1FBTm9CLENBQXRCO2VBUUEsS0FBSyxDQUFDLEdBQU4sQ0FBVSx1QkFBVixFQUFtQyxTQUFDLENBQUQsRUFBSSxlQUFKO1VBQ2pDLElBQUcsZUFBQSxLQUFxQixTQUF4QjtZQUNFLEtBQUEsR0FBUTttQkFDUixPQUFPLENBQUMsV0FBUixDQUFvQixXQUFwQixDQUFnQyxDQUFDLFdBQWpDLENBQTZDLFlBQTdDLEVBRkY7O1FBRGlDLENBQW5DO01BbkVJLENBRk47O0VBREYsQ0FOcUQ7Q0FBdkQ7Ozs7O0FDTkE7OztBQUdBLE9BQU8sQ0FBQyxNQUFSLENBQWUsYUFBZixDQUE2QixDQUFDLE1BQTlCLENBQXFDLGNBQXJDLEVBQXFELFNBQUE7U0FDbkQsT0FBQSxDQUFRLFNBQVI7QUFEbUQsQ0FBckQ7Ozs7O0FDSEE7OztBQUdBLE9BQU8sQ0FBQyxNQUFSLENBQWUsYUFBZixDQUVBLENBQUMsT0FGRCxDQUVTLFlBRlQsRUFFdUIsU0FBQTtBQUNyQixNQUFBO0VBQUEsRUFBQSxHQUFLO1NBRUw7SUFDRSxRQUFBLEVBQVUsU0FBQTthQUFHLEVBQUE7SUFBSCxDQURaOztBQUhxQixDQUZ2Qjs7Ozs7QUNIQTs7O0FBQUEsSUFBQTs7QUFHQSxPQUFPLENBQUMsTUFBUixDQUFlLGFBQWYsQ0FFQSxDQUFDLE9BRkQsQ0FFUyxhQUZULEVBRXdCLFNBQUE7QUFDdEIsTUFBQTtFQUFBLGVBQUEsR0FBa0I7U0FFbEI7SUFDRSxRQUFBLEVBQVUsU0FBQyxTQUFEO2FBQ1IsZUFBZSxDQUFDLE9BQWhCLENBQXdCLFNBQXhCLENBQUEsR0FBcUM7SUFEN0IsQ0FEWjtJQUlFLFlBQUEsRUFBYyxTQUFDLFNBQUQ7TUFDWixJQUFHLGFBQWlCLGVBQWpCLEVBQUEsU0FBQSxLQUFIO2VBQ0UsZUFBZSxDQUFDLElBQWhCLENBQXFCLFNBQXJCLEVBREY7O0lBRFksQ0FKaEI7SUFRRSxLQUFBLEVBQU8sU0FBQTthQUNMLGVBQWUsQ0FBQyxNQUFoQixHQUF5QjtJQURwQixDQVJUOztBQUhzQixDQUZ4QiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4yXG52YXIgY29tcGFyZVByb3BlcnR5LCBkb3Q7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgZXhwcmVzc2lvbnMpIHtcbiAgcmV0dXJuIGNvbGxlY3Rpb24uc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIGV4cHJlc3Npb24sIGksIGxlbiwgcHJlZGljYXRlLCByZXZlcnNlLCB2YWx1ZTtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBleHByZXNzaW9ucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb25zW2ldO1xuICAgICAgaWYgKHR5cGVvZiBleHByZXNzaW9uID09PSAnb2JqZWN0Jykge1xuICAgICAgICBwcmVkaWNhdGUgPSBleHByZXNzaW9uLnByZWRpY2F0ZTtcbiAgICAgICAgcmV2ZXJzZSA9IGV4cHJlc3Npb24ucmV2ZXJzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IGV4cHJlc3Npb247XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IGNvbXBhcmVQcm9wZXJ0eShwcmVkaWNhdGUsIHJldmVyc2UpKGEsIGIpO1xuICAgICAgaWYgKHZhbHVlICE9PSAwKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuZG90ID0ge1xuICBnZXQ6IGZ1bmN0aW9uKG9iaiwgZmllbGQpIHtcbiAgICB2YXIgaSwga2V5LCBrZXlzLCBsZW4sIHZhbHVlO1xuICAgIGtleXMgPSBmaWVsZC5zcGxpdCgnLicpO1xuICAgIHZhbHVlID0gb2JqO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGtleXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICB2YWx1ZSA9IHZhbHVlW2tleV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihvYmosIGZpZWxkLCBzZXRWYWx1ZSkge1xuICAgIHZhciBhbGxCdXRMYXN0S2V5LCBpLCBrZXksIGtleXMsIGxhc3RLZXksIGxlbiwgdmFsdWU7XG4gICAga2V5cyA9IGZpZWxkLnNwbGl0KCcuJyk7XG4gICAgYWxsQnV0TGFzdEtleSA9IGtleXMuc2xpY2UoMCwgLTEpO1xuICAgIGxhc3RLZXkgPSBrZXlzW2tleXMubGVuZ3RoIC0gMV07XG4gICAgdmFsdWUgPSBvYmo7XG4gICAgZm9yIChpID0gMCwgbGVuID0gYWxsQnV0TGFzdEtleS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAga2V5ID0gYWxsQnV0TGFzdEtleVtpXTtcbiAgICAgIHZhbHVlID0gdmFsdWVba2V5XSAhPSBudWxsID8gdmFsdWVba2V5XSA6IHZhbHVlW2tleV0gPSB7fTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlW2xhc3RLZXldID0gc2V0VmFsdWU7XG4gIH1cbn07XG5cbmNvbXBhcmVQcm9wZXJ0eSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSwgcmV2ZXJzZSkge1xuICB2YXIgZ2V0dGVyO1xuICBnZXR0ZXIgPSB0eXBlb2YgcHJlZGljYXRlID09PSAnZnVuY3Rpb24nID8gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHByZWRpY2F0ZShvYmopO1xuICB9IDogZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIGRvdC5nZXQob2JqLCBwcmVkaWNhdGUpO1xuICB9O1xuICBnZXR0ZXI7XG4gIGlmICghcmV2ZXJzZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICBpZiAoZ2V0dGVyKGEpIDwgZ2V0dGVyKGIpKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoZ2V0dGVyKGEpID4gZ2V0dGVyKGIpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgaWYgKGdldHRlcihhKSA+IGdldHRlcihiKSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2UgaWYgKGdldHRlcihhKSA8IGdldHRlcihiKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG4iLCJyZXF1aXJlICcuL211bHRpX29yZGVyX2J5J1xucmVxdWlyZSAnLi9zdF9lbGVtZW50X2lkJ1xucmVxdWlyZSAnLi9zdF9zaGlmdF9jbGljaydcblxubmcgPSBhbmd1bGFyXG5cbmFuZ3VsYXIubW9kdWxlKCdzbWFydC10YWJsZScpLmRpcmVjdGl2ZSAnc3RNdWx0aVNvcnQnLCBbXG4gICdzdENvbmZpZydcbiAgJyRwYXJzZSdcbiAgJyRyb290U2NvcGUnXG4gICdzdFVuaXF1ZUlkJ1xuICAnc3RTaGlmdFNvcnQnXG4gIChzdENvbmZpZywgJHBhcnNlLCAkcm9vdFNjb3BlLCBzdFVuaXF1ZUlkLCBzdFNoaWZ0U29ydCkgLT5cbiAgICByZXN0cmljdDogJ0EnXG4gICAgcmVxdWlyZTogJ15zdFRhYmxlJ1xuICAgIGxpbms6IChzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkgLT5cbiAgICAgIHByZWRpY2F0ZSA9IGF0dHIuc3RNdWx0aVNvcnRcbiAgICAgIGdldHRlciA9ICRwYXJzZShwcmVkaWNhdGUpXG4gICAgICBpbmRleCA9IDBcbiAgICAgIGNsYXNzQXNjZW50ID0gYXR0ci5zdENsYXNzQXNjZW50IG9yIHN0Q29uZmlnLnNvcnQuYXNjZW50Q2xhc3NcbiAgICAgIGNsYXNzRGVzY2VudCA9IGF0dHIuc3RDbGFzc0Rlc2NlbnQgb3Igc3RDb25maWcuc29ydC5kZXNjZW50Q2xhc3NcbiAgICAgIHN0YXRlQ2xhc3NlcyA9IFtcbiAgICAgICAgY2xhc3NBc2NlbnRcbiAgICAgICAgY2xhc3NEZXNjZW50XG4gICAgICBdXG4gICAgICBzb3J0RGVmYXVsdCA9IHVuZGVmaW5lZFxuICAgICAgZWxlbWVudElkID0gc3RVbmlxdWVJZC5nZW5lcmF0ZSgpXG5cbiAgICAgICMjI1xuICAgICAgVXNlIG91ciBjdXN0b20gb3JkZXJCeSBmaWx0ZXIsIHdoaWNoIHN1cHBvcnRzIHJldmVyc2luZyByb3dzIGluZGVwZW5kZW50bHlcbiAgICAgICMjI1xuICAgICAgY3RybC5zZXRTb3J0RnVuY3Rpb24gJ211bHRpT3JkZXJCeSdcblxuICAgICAgIyMjXG4gICAgICBTb3J0IHRoZSByb3dzLlxuICAgICAgQHBhcmFtIHtCb29sZWFufSBob2xkaW5nU2hpZnRLZXlcbiAgICAgICMjI1xuICAgICAgc29ydCA9IChob2xkaW5nU2hpZnRLZXkpIC0+XG4gICAgICAgIGluZGV4KytcbiAgICAgICAgdGFibGVTdGF0ZSA9IGN0cmwudGFibGVTdGF0ZSgpXG4gICAgICAgIHRhYmxlU3RhdGUuc29ydC5wcmVkaWNhdGUgPz0gW11cbiAgICAgICAgcmV2ZXJzZSA9IGluZGV4ICUgMiBpcyAwXG4gICAgICAgIHByZWRpY2F0ZSA9IGlmIG5nLmlzRnVuY3Rpb24oZ2V0dGVyKHNjb3BlKSkgdGhlbiBnZXR0ZXIoc2NvcGUpIGVsc2UgYXR0ci5zdE11bHRpU29ydFxuXG4gICAgICAgIGRvIC0+ICMgY2xlYXIgZXhpc3Rpbmcgc29ydFxuICAgICAgICAgIGluZGV4T2ZFeGlzdGluZ1NvcnQgPSBkbyAtPlxuICAgICAgICAgICAgZm9yIGksIHNvcnRDb25maWcgb2YgY3RybC50YWJsZVN0YXRlKCkuc29ydC5wcmVkaWNhdGVcbiAgICAgICAgICAgICAgaWYgc29ydENvbmZpZy5lbGVtZW50SWQgaXMgZWxlbWVudElkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcbiAgICAgICAgICAgIHJldHVybiAtMVxuICAgICAgICAgIGlmIGluZGV4T2ZFeGlzdGluZ1NvcnQgaXNudCAtMVxuICAgICAgICAgICAgdGFibGVTdGF0ZS5zb3J0LnByZWRpY2F0ZS5zcGxpY2UgaW5kZXhPZkV4aXN0aW5nU29ydCwgMVxuXG4gICAgICAgIGRvIC0+ICMgYWRkIHNvcnQgY2xhc3MgdG8gZWxlbWVudFxuICAgICAgICAgIGluZGV4ID0gaWYgaW5kZXggJSAyID09IDAgdGhlbiAyIGVsc2UgMVxuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3Moc3RhdGVDbGFzc2VzW2luZGV4ICUgMl0pLmFkZENsYXNzIHN0YXRlQ2xhc3Nlc1tpbmRleCAtIDFdXG4gICAgICAgICAgaWYgIWhvbGRpbmdTaGlmdEtleVxuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0ICdjbGVhck90aGVyU29ydENsYXNzZXMnLCBlbGVtZW50SWRcblxuICAgICAgICB0YWJsZVN0YXRlLnNvcnQucHJlZGljYXRlLnNwbGljZSBzdFNoaWZ0U29ydC5nZXRJbmRleChlbGVtZW50SWQpLCAwLFxuICAgICAgICAgIGVsZW1lbnRJZDogZWxlbWVudElkXG4gICAgICAgICAgcHJlZGljYXRlOiBwcmVkaWNhdGVcbiAgICAgICAgICByZXZlcnNlOiByZXZlcnNlID09IHRydWVcblxuICAgICAgICB0YWJsZVN0YXRlLnBhZ2luYXRpb24uc3RhcnQgPSAwXG4gICAgICAgIGN0cmwucGlwZSgpXG5cbiAgICAgIGlmIGF0dHIuc3RTb3J0RGVmYXVsdFxuICAgICAgICBzb3J0RGVmYXVsdCA9IGlmIHNjb3BlLiRldmFsKGF0dHIuc3RTb3J0RGVmYXVsdCk/IHRoZW4gc2NvcGUuJGV2YWwoYXR0ci5zdFNvcnREZWZhdWx0KSBlbHNlIGF0dHIuc3RTb3J0RGVmYXVsdFxuXG4gICAgICBpZiBzb3J0RGVmYXVsdFxuICAgICAgICBpbmRleCA9IGlmIHNvcnREZWZhdWx0ID09ICdyZXZlcnNlJyB0aGVuIDEgZWxzZSAwXG4gICAgICAgIHNvcnQoKVxuXG4gICAgICBlbGVtZW50LmJpbmQgJ2NsaWNrJywgKGUpIC0+XG4gICAgICAgIHJldHVybiB1bmxlc3MgcHJlZGljYXRlXG4gICAgICAgIGlmIGUuc2hpZnRLZXkgb3IgZS5hbHRLZXlcbiAgICAgICAgICBzdFNoaWZ0U29ydC5jbGlja0VsZW1lbnQgZWxlbWVudElkXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzdFNoaWZ0U29ydC5jbGVhcigpXG4gICAgICAgIHNjb3BlLiRhcHBseSAtPiBzb3J0KGUuc2hpZnRLZXkpXG5cbiAgICAgIHNjb3BlLiRvbiAnY2xlYXJPdGhlclNvcnRDbGFzc2VzJywgKGUsIHNvcnRlZEVsZW1lbnRJZCkgLT5cbiAgICAgICAgaWYgc29ydGVkRWxlbWVudElkIGlzbnQgZWxlbWVudElkXG4gICAgICAgICAgaW5kZXggPSAwXG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhjbGFzc0FzY2VudCkucmVtb3ZlQ2xhc3MoY2xhc3NEZXNjZW50KVxuXVxuIiwiIyMjXG5MaWtlIGFuZ3VsYXIgb3JkZXJCeSBmaWx0ZXIsIGJ1dCBhbGxvd3MgcmV2ZXJzaW5nIGVhY2ggcGFyYW1ldGVyIGluZGl2aWR1YWxseSAoZXZlbiBnZXR0ZXJzKVxuIyMjXG5hbmd1bGFyLm1vZHVsZSgnc21hcnQtdGFibGUnKS5maWx0ZXIgJ211bHRpT3JkZXJCeScsIC0+XG4gIHJlcXVpcmUgJ29yZGVyYnknXG4iLCIjIyNcbkdlbmVyYXRlIHVuaXF1ZSBpZHMgdG8gaWRlbnRpZnkgZWFjaCBzb3J0YWJsZSBlbGVtZW50IG9uIHRoZSBwYWdlXG4jIyNcbmFuZ3VsYXIubW9kdWxlKCdzbWFydC10YWJsZScpXG5cbi5mYWN0b3J5ICdzdFVuaXF1ZUlkJywgLT5cbiAgaWQgPSAwXG5cbiAge1xuICAgIGdlbmVyYXRlOiAtPiBpZCsrXG4gIH1cbiIsIiMjI1xuU2VydmljZSB0byBtYW5hZ2Ugc2hpZnQgY2xpY2tzIG9uIGVsZW1lbnRzXG4jIyNcbmFuZ3VsYXIubW9kdWxlKCdzbWFydC10YWJsZScpXG5cbi5mYWN0b3J5ICdzdFNoaWZ0U29ydCcsIC0+XG4gIGNsaWNrZWRFbGVtZW50cyA9IFtdXG5cbiAge1xuICAgIGdldEluZGV4OiAoZWxlbWVudElkKSAtPlxuICAgICAgY2xpY2tlZEVsZW1lbnRzLmluZGV4T2YoZWxlbWVudElkKSArIDFcblxuICAgIGNsaWNrRWxlbWVudDogKGVsZW1lbnRJZCkgLT5cbiAgICAgIGlmIGVsZW1lbnRJZCBub3QgaW4gY2xpY2tlZEVsZW1lbnRzXG4gICAgICAgIGNsaWNrZWRFbGVtZW50cy5wdXNoIGVsZW1lbnRJZFxuXG4gICAgY2xlYXI6IC0+XG4gICAgICBjbGlja2VkRWxlbWVudHMubGVuZ3RoID0gMFxuICB9XG4iXX0=
